// generated by genrx -type Int32Pair -name RxInt32Pair .; DO NOT EDIT

package pair

import (
	"sync"
)

// RxInt32Pair is the reactive wrapper for Int32Pair
type RxInt32Pair struct {
	value Int32Pair
	lock  sync.RWMutex

	handles     chan int
	subscribers []chan<- Int32Pair
}

// NewRxInt32Pair creates a new reactive object for the initial value of Int32Pair
func NewRxInt32Pair(v Int32Pair) *RxInt32Pair {
	return &RxInt32Pair{
		value:   v,
		handles: make(chan int, 1),
	}
}

// Get gets the Int32Pair
func (rx *RxInt32Pair) Get() Int32Pair {
	rx.lock.RLock()
	defer rx.lock.RUnlock()
	return rx.value
}

// Set sets the Int32Pair and notifies subscribers
func (rx *RxInt32Pair) Set(v Int32Pair) {
	rx.lock.Lock()
	defer rx.lock.Unlock()
	rx.value = v

	for _, s := range rx.subscribers {
		if s != nil {
			s <- v
		}
	}
}

// Subscribe subscribes to changes on the Int32Pair
func (rx *RxInt32Pair) Subscribe() *RxInt32PairSubscriber {

	c := make(chan Int32Pair)

	s := &RxInt32PairSubscriber{
		C:      c,
		parent: rx,
	}

	rx.lock.Lock()
	select {
	case handle := <-rx.handles:
		s.handle = handle
		rx.subscribers[handle] = c
	default:
		rx.subscribers = append(rx.subscribers, c)
		s.handle = len(rx.subscribers) - 1
	}

	rx.lock.Unlock()

	return s
}

// RxInt32PairSubscriber allows subscribing to the reactive Int32Pair
type RxInt32PairSubscriber struct {
	C      <-chan Int32Pair
	handle int
	parent *RxInt32Pair
}

// Close closes the subscription
func (s *RxInt32PairSubscriber) Close() {
	// remove from parent and close channel
	s.parent.lock.Lock()
	close(s.parent.subscribers[s.handle])
	s.parent.subscribers[s.handle] = nil
	s.parent.lock.Unlock()

	go func() {
		s.parent.handles <- s.handle
	}()
}
